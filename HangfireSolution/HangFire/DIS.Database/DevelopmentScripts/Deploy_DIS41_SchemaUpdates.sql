/*
Deployment script for DIS4_dev

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;

GO
USE DIS4_dev;


GO

PRINT N'Dropping [dbo].[vw_tmp_ErrorMessages]...';


GO
DROP VIEW [dbo].[vw_tmp_ErrorMessages];


GO
PRINT N'Dropping [dbo].[fn_GetAllTransactionLogs]...';


GO
DROP FUNCTION [dbo].[fn_GetAllTransactionLogs];


GO
PRINT N'Creating [dbo].[EventKeyValuePair]...';


GO
CREATE TYPE [dbo].[EventKeyValuePair] AS TABLE (
	[Key]   VARCHAR (50)  NULL,
	[Value] VARCHAR (MAX) NULL);


GO
PRINT N'Starting rebuilding table [dbo].[ADP_Maintenance_Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ADP_Maintenance_Logs] (
	[Log_Id]             INT            IDENTITY (1, 1) NOT NULL,
	[ApplicationID]      INT            NOT NULL,
	[EventCode]          INT            NULL,
	[EventDate]          DATETIME       NOT NULL,
	[EventLevel]         NVARCHAR (100) NOT NULL,
	[UserName]           NVARCHAR (100) NOT NULL,
	[MachineName]        NVARCHAR (100) NOT NULL,
	[EventMessage]       NVARCHAR (MAX) NULL,
	[EventSource]        NVARCHAR (100) NULL,
	[EventClass]         NVARCHAR (100) NULL,
	[ErrorMethod]        NVARCHAR (MAX) NULL,
	[InsertErrorMessage] NVARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)   NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_ADP_Maintenance_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[ADP_Maintenance_Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ADP_Maintenance_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_ADP_Maintenance_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[ADP_Maintenance_Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ADP_Maintenance_Logs] OFF;
	END

DROP TABLE [dbo].[ADP_Maintenance_Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ADP_Maintenance_Logs]', N'ADP_Maintenance_Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_ADP_Maintenance_Logs]', N'PK_ADP_Maintenance_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[ADP_Maintenance_Logs].[IX_ADP_Maintenance_Logs_3]...';


GO
CREATE NONCLUSTERED INDEX [IX_ADP_Maintenance_Logs_3]
	ON [dbo].[ADP_Maintenance_Logs]([TransactionID] ASC);


GO
PRINT N'Creating [dbo].[ADP_Maintenance_Logs].[IX_ADP_Maintenance_Logs_2]...';


GO
CREATE NONCLUSTERED INDEX [IX_ADP_Maintenance_Logs_2]
	ON [dbo].[ADP_Maintenance_Logs]([ApplicationID] ASC);


GO
PRINT N'Creating [dbo].[ADP_Maintenance_Logs].[IX_ADP_Maintenance_Logs_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_ADP_Maintenance_Logs_1]
	ON [dbo].[ADP_Maintenance_Logs]([EventClass] ASC);


GO
PRINT N'Creating [dbo].[ADP_Maintenance_Logs].[IX_ADP_Maintenance_Logs]...';


GO
CREATE NONCLUSTERED INDEX [IX_ADP_Maintenance_Logs]
	ON [dbo].[ADP_Maintenance_Logs]([EventDate] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[ADP_Scheduler_Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ADP_Scheduler_Logs] (
	[Log_Id]             INT            IDENTITY (1, 1) NOT NULL,
	[ApplicationID]      INT            NOT NULL,
	[EventDate]          DATETIME       NOT NULL,
	[EventCode]          INT            NULL,
	[EventLevel]         NVARCHAR (100) NOT NULL,
	[UserName]           NVARCHAR (100) NOT NULL,
	[MachineName]        NVARCHAR (100) NOT NULL,
	[EventMessage]       NVARCHAR (MAX) NULL,
	[EventSource]        NVARCHAR (100) NULL,
	[EventClass]         NVARCHAR (100) NULL,
	[ErrorMethod]        NVARCHAR (MAX) NULL,
	[InsertErrorMessage] NVARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)   NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_ADP_Scheduler_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[ADP_Scheduler_Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ADP_Scheduler_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_ADP_Scheduler_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[ADP_Scheduler_Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ADP_Scheduler_Logs] OFF;
	END

DROP TABLE [dbo].[ADP_Scheduler_Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ADP_Scheduler_Logs]', N'ADP_Scheduler_Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_ADP_Scheduler_Logs]', N'PK_ADP_Scheduler_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[ADP_Scheduler_Logs].[IX_ADP_Scheduler_Logs_3]...';


GO
CREATE NONCLUSTERED INDEX [IX_ADP_Scheduler_Logs_3]
	ON [dbo].[ADP_Scheduler_Logs]([EventDate] ASC);


GO
PRINT N'Creating [dbo].[ADP_Scheduler_Logs].[IX_ADP_Scheduler_Logs_2]...';


GO
CREATE NONCLUSTERED INDEX [IX_ADP_Scheduler_Logs_2]
	ON [dbo].[ADP_Scheduler_Logs]([ApplicationID] ASC);


GO
PRINT N'Creating [dbo].[ADP_Scheduler_Logs].[IX_ADP_Scheduler_Logs_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_ADP_Scheduler_Logs_1]
	ON [dbo].[ADP_Scheduler_Logs]([TransactionID] ASC);


GO
PRINT N'Creating [dbo].[ADP_Scheduler_Logs].[IX_ADP_Scheduler_Logs]...';


GO
CREATE NONCLUSTERED INDEX [IX_ADP_Scheduler_Logs]
	ON [dbo].[ADP_Scheduler_Logs]([EventClass] ASC);


GO
PRINT N'Altering [dbo].[Business_Area_Application]...';


GO
ALTER TABLE [dbo].[Business_Area_Application]
	ADD [EnableLog]          BIT CONSTRAINT [DF_Business_Area_Application_IsLogActive] DEFAULT ((1)) NULL,
		[EnableNotification] BIT CONSTRAINT [DF_Business_Area_Application_IsNotificationActive] DEFAULT ((1)) NULL;


GO
PRINT N'Starting rebuilding table [dbo].[Finance_Clients_Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Finance_Clients_Logs] (
	[Log_Id]             INT            IDENTITY (1, 1) NOT NULL,
	[EventCode]          INT            NULL,
	[LevelID]            INT            NULL,
	[ApplicationID]      INT            NOT NULL,
	[EventDate]          DATETIME       NOT NULL,
	[EventLevel]         NVARCHAR (100) NOT NULL,
	[UserName]           NVARCHAR (100) NOT NULL,
	[MachineName]        NVARCHAR (100) NOT NULL,
	[EventMessage]       NVARCHAR (MAX) NULL,
	[EventSource]        NVARCHAR (100) NULL,
	[EventClass]         NVARCHAR (100) NULL,
	[ErrorMethod]        NVARCHAR (MAX) NULL,
	[InsertErrorMessage] NVARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)   NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_Finance_Clients_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[Finance_Clients_Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Finance_Clients_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_Finance_Clients_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[Finance_Clients_Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Finance_Clients_Logs] OFF;
	END

DROP TABLE [dbo].[Finance_Clients_Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Finance_Clients_Logs]', N'Finance_Clients_Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Finance_Clients_Logs]', N'PK_Finance_Clients_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Finance_Clients_Logs].[IX_Finance_Clients_Logs_3]...';


GO
CREATE NONCLUSTERED INDEX [IX_Finance_Clients_Logs_3]
	ON [dbo].[Finance_Clients_Logs]([ApplicationID] ASC);


GO
PRINT N'Creating [dbo].[Finance_Clients_Logs].[IX_Finance_Clients_Logs_2]...';


GO
CREATE NONCLUSTERED INDEX [IX_Finance_Clients_Logs_2]
	ON [dbo].[Finance_Clients_Logs]([TransactionID] ASC);


GO
PRINT N'Creating [dbo].[Finance_Clients_Logs].[IX_Finance_Clients_Logs_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_Finance_Clients_Logs_1]
	ON [dbo].[Finance_Clients_Logs]([EventDate] ASC);


GO
PRINT N'Creating [dbo].[Finance_Clients_Logs].[IX_Finance_Clients_Logs]...';


GO
CREATE NONCLUSTERED INDEX [IX_Finance_Clients_Logs]
	ON [dbo].[Finance_Clients_Logs]([EventClass] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Finance_Transaction_Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Finance_Transaction_Logs] (
	[Log_Id]             INT            IDENTITY (1, 1) NOT NULL,
	[ApplicationID]      INT            NOT NULL,
	[EventDate]          DATETIME       NOT NULL,
	[EventCode]          INT            NULL,
	[EventLevel]         NVARCHAR (100) NOT NULL,
	[UserName]           NVARCHAR (100) NOT NULL,
	[MachineName]        NVARCHAR (100) NOT NULL,
	[EventMessage]       NVARCHAR (MAX) NULL,
	[EventSource]        NVARCHAR (100) NULL,
	[EventClass]         NVARCHAR (100) NULL,
	[ErrorMethod]        NVARCHAR (MAX) NULL,
	[InsertErrorMessage] NVARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)   NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_Finance_Transaction_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[Finance_Transaction_Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Finance_Transaction_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_Finance_Transaction_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[Finance_Transaction_Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Finance_Transaction_Logs] OFF;
	END

DROP TABLE [dbo].[Finance_Transaction_Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Finance_Transaction_Logs]', N'Finance_Transaction_Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Finance_Transaction_Logs]', N'PK_Finance_Transaction_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Finance_Transaction_Logs].[IX_Finance_Transaction_Logs_3]...';


GO
CREATE NONCLUSTERED INDEX [IX_Finance_Transaction_Logs_3]
	ON [dbo].[Finance_Transaction_Logs]([ApplicationID] ASC);


GO
PRINT N'Creating [dbo].[Finance_Transaction_Logs].[IX_Finance_Transaction_Logs_2]...';


GO
CREATE NONCLUSTERED INDEX [IX_Finance_Transaction_Logs_2]
	ON [dbo].[Finance_Transaction_Logs]([TransactionID] ASC);


GO
PRINT N'Creating [dbo].[Finance_Transaction_Logs].[IX_Finance_Transaction_Logs_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_Finance_Transaction_Logs_1]
	ON [dbo].[Finance_Transaction_Logs]([EventDate] ASC);


GO
PRINT N'Creating [dbo].[Finance_Transaction_Logs].[IX_Finance_Transaction_Logs]...';


GO
CREATE NONCLUSTERED INDEX [IX_Finance_Transaction_Logs]
	ON [dbo].[Finance_Transaction_Logs]([EventClass] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Logs] (
	[Log_Id]             INT           IDENTITY (1, 1) NOT NULL,
	[ApplicationID]      INT           NOT NULL,
	[EventDate]          DATETIME      NOT NULL,
	[EventLevel]         VARCHAR (10)  NOT NULL,
	[UserName]           VARCHAR (100) NOT NULL,
	[MachineName]        VARCHAR (100) NOT NULL,
	[EventMessage]       VARCHAR (MAX) NULL,
	[EventSource]        VARCHAR (100) NULL,
	[EventClass]         VARCHAR (100) NULL,
	[ErrorMethod]        VARCHAR (10)  NULL,
	[InsertErrorMessage] VARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)  NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Logs] OFF;
	END

DROP TABLE [dbo].[Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Logs]', N'Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Logs]', N'PK_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Security_Authentication_Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Security_Authentication_Logs] (
	[Log_Id]             INT            IDENTITY (1, 1) NOT NULL,
	[ApplicationID]      INT            NOT NULL,
	[EventDate]          DATETIME       NOT NULL,
	[EventCode]          INT            NULL,
	[EventLevel]         NVARCHAR (100) NOT NULL,
	[UserName]           NVARCHAR (100) NOT NULL,
	[MachineName]        NVARCHAR (100) NOT NULL,
	[EventMessage]       NVARCHAR (MAX) NULL,
	[EventSource]        NVARCHAR (100) NULL,
	[EventClass]         NVARCHAR (100) NULL,
	[ErrorMethod]        NVARCHAR (MAX) NULL,
	[InsertErrorMessage] NVARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)   NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_Security_Authentication_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[Security_Authentication_Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Security_Authentication_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_Security_Authentication_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[Security_Authentication_Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Security_Authentication_Logs] OFF;
	END

DROP TABLE [dbo].[Security_Authentication_Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Security_Authentication_Logs]', N'Security_Authentication_Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Security_Authentication_Logs]', N'PK_Security_Authentication_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Staffing_Candidate_Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Staffing_Candidate_Logs] (
	[Log_Id]             INT            IDENTITY (1, 1) NOT NULL,
	[ApplicationID]      INT            NOT NULL,
	[EventDate]          DATETIME       NOT NULL,
	[EventCode]          INT            NULL,
	[EventLevel]         NVARCHAR (100) NOT NULL,
	[UserName]           NVARCHAR (100) NOT NULL,
	[MachineName]        NVARCHAR (100) NOT NULL,
	[EventMessage]       NVARCHAR (MAX) NULL,
	[EventSource]        NVARCHAR (100) NULL,
	[EventClass]         NVARCHAR (100) NULL,
	[ErrorMethod]        NVARCHAR (MAX) NULL,
	[InsertErrorMessage] NVARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)   NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_Staffing_Candidate_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[Staffing_Candidate_Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Staffing_Candidate_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_Staffing_Candidate_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[Staffing_Candidate_Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Staffing_Candidate_Logs] OFF;
	END

DROP TABLE [dbo].[Staffing_Candidate_Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Staffing_Candidate_Logs]', N'Staffing_Candidate_Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Staffing_Candidate_Logs]', N'PK_Staffing_Candidate_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Staffing_Candidate_Logs].[IX_Staffing_Candidate_Logs_3]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Candidate_Logs_3]
	ON [dbo].[Staffing_Candidate_Logs]([ApplicationID] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Candidate_Logs].[IX_Staffing_Candidate_Logs_2]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Candidate_Logs_2]
	ON [dbo].[Staffing_Candidate_Logs]([TransactionID] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Candidate_Logs].[IX_Staffing_Candidate_Logs_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Candidate_Logs_1]
	ON [dbo].[Staffing_Candidate_Logs]([EventDate] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Candidate_Logs].[IX_Staffing_Candidate_Logs]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Candidate_Logs]
	ON [dbo].[Staffing_Candidate_Logs]([EventClass] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Staffing_Clients_Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Staffing_Clients_Logs] (
	[Log_Id]             INT            IDENTITY (1, 1) NOT NULL,
	[ApplicationID]      INT            NOT NULL,
	[EventDate]          DATETIME       NOT NULL,
	[EventCode]          INT            NULL,
	[EventLevel]         NVARCHAR (100) NOT NULL,
	[UserName]           NVARCHAR (100) NOT NULL,
	[MachineName]        NVARCHAR (100) NOT NULL,
	[EventMessage]       NVARCHAR (MAX) NULL,
	[EventSource]        NVARCHAR (100) NULL,
	[EventClass]         NVARCHAR (100) NULL,
	[ErrorMethod]        NVARCHAR (MAX) NULL,
	[InsertErrorMessage] NVARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)   NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_Staffing_Clients_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[Staffing_Clients_Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Staffing_Clients_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_Staffing_Clients_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[Staffing_Clients_Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Staffing_Clients_Logs] OFF;
	END

DROP TABLE [dbo].[Staffing_Clients_Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Staffing_Clients_Logs]', N'Staffing_Clients_Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Staffing_Clients_Logs]', N'PK_Staffing_Clients_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Staffing_Clients_Logs].[IX_Staffing_Clients_Logs_3]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Clients_Logs_3]
	ON [dbo].[Staffing_Clients_Logs]([ApplicationID] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Clients_Logs].[IX_Staffing_Clients_Logs_2]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Clients_Logs_2]
	ON [dbo].[Staffing_Clients_Logs]([TransactionID] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Clients_Logs].[IX_Staffing_Clients_Logs_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Clients_Logs_1]
	ON [dbo].[Staffing_Clients_Logs]([EventDate] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Clients_Logs].[IX_Staffing_Clients_Logs]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Clients_Logs]
	ON [dbo].[Staffing_Clients_Logs]([EventClass] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Staffing_Transaction_Logs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Staffing_Transaction_Logs] (
	[Log_Id]             INT            IDENTITY (1, 1) NOT NULL,
	[ApplicationID]      INT            NOT NULL,
	[EventDate]          DATETIME       NOT NULL,
	[EventCode]          INT            NULL,
	[EventLevel]         NVARCHAR (100) NOT NULL,
	[UserName]           NVARCHAR (100) NOT NULL,
	[MachineName]        NVARCHAR (100) NOT NULL,
	[EventMessage]       NVARCHAR (MAX) NULL,
	[EventSource]        NVARCHAR (100) NULL,
	[EventClass]         NVARCHAR (100) NULL,
	[ErrorMethod]        NVARCHAR (MAX) NULL,
	[InsertErrorMessage] NVARCHAR (MAX) NULL,
	[TransactionID]      VARCHAR (50)   NULL,
	CONSTRAINT [tmp_ms_xx_constraint_PK_Staffing_Transaction_Logs] PRIMARY KEY CLUSTERED ([Log_Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
		   FROM   [dbo].[Staffing_Transaction_Logs])
	BEGIN
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Staffing_Transaction_Logs] ON;
		INSERT INTO [dbo].[tmp_ms_xx_Staffing_Transaction_Logs] ([Log_Id], [ApplicationID], [EventDate], [EventLevel], [UserName], [MachineName], [EventMessage], [EventSource], [EventClass], [ErrorMethod], [InsertErrorMessage], [TransactionID])
		SELECT   [Log_Id],
				 [ApplicationID],
				 [EventDate],
				 [EventLevel],
				 [UserName],
				 [MachineName],
				 [EventMessage],
				 [EventSource],
				 [EventClass],
				 [ErrorMethod],
				 [InsertErrorMessage],
				 [TransactionID]
		FROM     [dbo].[Staffing_Transaction_Logs]
		ORDER BY [Log_Id] ASC;
		SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Staffing_Transaction_Logs] OFF;
	END

DROP TABLE [dbo].[Staffing_Transaction_Logs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Staffing_Transaction_Logs]', N'Staffing_Transaction_Logs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Staffing_Transaction_Logs]', N'PK_Staffing_Transaction_Logs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Staffing_Transaction_Logs].[IX_Staffing_Transaction_Logs_3]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Transaction_Logs_3]
	ON [dbo].[Staffing_Transaction_Logs]([ApplicationID] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Transaction_Logs].[IX_Staffing_Transaction_Logs_2]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Transaction_Logs_2]
	ON [dbo].[Staffing_Transaction_Logs]([TransactionID] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Transaction_Logs].[IX_Staffing_Transaction_Logs_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Transaction_Logs_1]
	ON [dbo].[Staffing_Transaction_Logs]([EventDate] ASC);


GO
PRINT N'Creating [dbo].[Staffing_Transaction_Logs].[IX_Staffing_Transaction_Logs]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staffing_Transaction_Logs]
	ON [dbo].[Staffing_Transaction_Logs]([EventClass] ASC);


GO
PRINT N'Creating [dbo].[Business_Area_Application_Config]...';


GO
CREATE TABLE [dbo].[Business_Area_Application_Config] (
	[Id]         INT           IDENTITY (1, 1) NOT NULL,
	[AppId]      INT           NOT NULL,
	[KeyName]    VARCHAR (100) NOT NULL,
	[Value]      VARCHAR (MAX) NULL,
	[CreatedOn]  DATETIME      NULL,
	[ModifiedOn] DATETIME      NULL,
	CONSTRAINT [PK_App_config] PRIMARY KEY CLUSTERED ([Id] ASC),
	CONSTRAINT [UK_App_Config] UNIQUE NONCLUSTERED ([AppId] ASC, [KeyName] ASC)
);


GO
PRINT N'Creating [dbo].[DiagApiSettings]...';


GO
CREATE TABLE [dbo].[DiagApiSettings] (
	[Id]               INT        NOT NULL,
	[ApiId]            INT        NOT NULL,
	[DiagTestId]       INT        NOT NULL,
	[EvaluationSource] NCHAR (10) NULL,
	[EvaluationField]  NCHAR (10) NULL,
	[IdentifierKey]    NCHAR (10) NULL,
	[Description]      NCHAR (10) NULL,
	CONSTRAINT [PK_DiagApiSettings] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DiagBatches]...';


GO
CREATE TABLE [dbo].[DiagBatches] (
	[Id]   INT           IDENTITY (1, 1) NOT NULL,
	[Name] VARCHAR (200) NOT NULL,
	CONSTRAINT [PK_DiagBatches] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DiagBatchSettings]...';


GO
CREATE TABLE [dbo].[DiagBatchSettings] (
	[BatchId]           INT NOT NULL,
	[DiagApiSettingsId] INT NOT NULL
);


GO
PRINT N'Creating [dbo].[DiagHistory]...';


GO
CREATE TABLE [dbo].[DiagHistory] (
	[id]                INT        NOT NULL,
	[DiagApiSettingsId] INT        NOT NULL,
	[Expected]          NCHAR (10) NULL,
	[Result]            NCHAR (10) NULL,
	[Status]            BIT        NULL,
	[Time]              DATETIME   NULL,
	[Remarks]           NCHAR (10) NULL
);


GO
PRINT N'Creating [dbo].[DiagHistoryMeta]...';


GO
CREATE TABLE [dbo].[DiagHistoryMeta] (
	[Id]          INT        IDENTITY (1, 1) NOT NULL,
	[DiagBatchId] INT        NOT NULL,
	[Username]    NCHAR (10) NULL,
	[MachineName] NCHAR (10) NULL,
	CONSTRAINT [PK_DiagHistoryMeta] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DiagTestSettings]...';


GO
CREATE TABLE [dbo].[DiagTestSettings] (
	[Id]             INT        IDENTITY (1, 1) NOT NULL,
	[TestType]       NCHAR (10) NULL,
	[TestAction]     NCHAR (10) NULL,
	[EvaluationType] NCHAR (10) NULL,
	[Operator]       NCHAR (10) NULL,
	[ExpectedValue]  NCHAR (10) NULL,
	CONSTRAINT [PK_DiagTestSettings] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EventCodes]...';


GO
CREATE TABLE [dbo].[EventCodes] (
	[EventCode]   INT           NOT NULL,
	[EventKey]    VARCHAR (100) NOT NULL,
	[Description] VARCHAR (MAX) NULL,
	[IsActive]    BIT           NULL,
	CONSTRAINT [PK_EventCodes] PRIMARY KEY CLUSTERED ([EventCode] ASC)
);


GO
PRINT N'Creating [dbo].[EventCodes].[UK_Table_1]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_Table_1]
	ON [dbo].[EventCodes]([EventKey] ASC);


GO
PRINT N'Creating [dbo].[EventLevels]...';


GO
CREATE TABLE [dbo].[EventLevels] (
	[LevelID]   INT          IDENTITY (1, 1) NOT NULL,
	[LevelName] VARCHAR (10) NULL,
	[IsActive]  BIT          NULL,
	CONSTRAINT [PK_EventLevels] PRIMARY KEY CLUSTERED ([LevelID] ASC)
);


GO
PRINT N'Creating [dbo].[EventLevelsByApplication]...';


GO
CREATE TABLE [dbo].[EventLevelsByApplication] (
	[ApplicationID] INT NOT NULL,
	[LevelID]       INT NOT NULL,
	CONSTRAINT [PK] PRIMARY KEY CLUSTERED ([ApplicationID] ASC, [LevelID] ASC)
);


GO
PRINT N'Creating [dbo].[EventWorkflows]...';


GO
CREATE TABLE [dbo].[EventWorkflows] (
	[Id]         INT           IDENTITY (1, 1) NOT NULL,
	[EventCode]  INT           NULL,
	[LevelID]    INT           NULL,
	[ActionType] VARCHAR (3)   NULL,
	[Template]   VARCHAR (MAX) NULL,
	[AppID]      INT           NULL,
	[IsActive]   BIT           NULL,
	CONSTRAINT [PK_EventWorkflows] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationHistory]...';


GO
CREATE TABLE [dbo].[NotificationHistory] (
	[Id]            INT           IDENTITY (1, 1) NOT NULL,
	[AppID]         INT           NOT NULL,
	[EventCode]     INT           NOT NULL,
	[EventDate]     DATETIME      NOT NULL,
	[Level]         VARCHAR (10)  NOT NULL,
	[Status]        BIT           NOT NULL,
	[Subject]       VARCHAR (100) NULL,
	[Body]          VARCHAR (MAX) NOT NULL,
	[Address_To]    VARCHAR (250) NOT NULL,
	[Address_CC]    VARCHAR (250) NULL,
	[TransactionID] VARCHAR (50)  NOT NULL,
	CONSTRAINT [PK_NotificationHistory] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationLevelsByApplication]...';


GO
CREATE TABLE [dbo].[NotificationLevelsByApplication] (
	[ApplicationID] INT NULL,
	[LevelID]       INT NULL
);


GO
PRINT N'Creating [dbo].[NotificationWorkflows]...';


GO
CREATE TABLE [dbo].[NotificationWorkflows] (
	[Id]              INT           IDENTITY (1, 1) NOT NULL,
	[EventCode]       INT           NOT NULL,
	[LevelID]         INT           NOT NULL,
	[BodyTemplate]    VARCHAR (MAX) NOT NULL,
	[AppID]           INT           NULL,
	[IsActive]        BIT           NOT NULL,
	[SubjectTemplate] VARCHAR (MAX) NOT NULL,
	CONSTRAINT [PK_NotificationWorkflows] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DF_EventCodes_IsActive]...';


GO
ALTER TABLE [dbo].[EventCodes]
	ADD CONSTRAINT [DF_EventCodes_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_EventLevels_IsActive]...';


GO
ALTER TABLE [dbo].[EventLevels]
	ADD CONSTRAINT [DF_EventLevels_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[FK_Business_Area_Application_Config_Business_Area_Application]...';


GO
ALTER TABLE [dbo].[Business_Area_Application_Config] WITH NOCHECK
	ADD CONSTRAINT [FK_Business_Area_Application_Config_Business_Area_Application] FOREIGN KEY ([AppId]) REFERENCES [dbo].[Business_Area_Application] ([Id]);


GO
PRINT N'Creating [dbo].[FK_DiagApiSettings_Business_Area_Application]...';


GO
ALTER TABLE [dbo].[DiagApiSettings] WITH NOCHECK
	ADD CONSTRAINT [FK_DiagApiSettings_Business_Area_Application] FOREIGN KEY ([ApiId]) REFERENCES [dbo].[Business_Area_Application_Resource_API] ([API_ID]);


GO
PRINT N'Creating [dbo].[FK_DiagApiSettings_DiagTestSettings]...';


GO
ALTER TABLE [dbo].[DiagApiSettings] WITH NOCHECK
	ADD CONSTRAINT [FK_DiagApiSettings_DiagTestSettings] FOREIGN KEY ([DiagTestId]) REFERENCES [dbo].[DiagTestSettings] ([Id]);


GO
PRINT N'Creating [dbo].[FK_DiagBatchSettings_DiagApiSettings]...';


GO
ALTER TABLE [dbo].[DiagBatchSettings] WITH NOCHECK
	ADD CONSTRAINT [FK_DiagBatchSettings_DiagApiSettings] FOREIGN KEY ([BatchId]) REFERENCES [dbo].[DiagApiSettings] ([Id]);


GO
PRINT N'Creating [dbo].[FK_DiagBatchSettings_DiagBatches]...';


GO
ALTER TABLE [dbo].[DiagBatchSettings] WITH NOCHECK
	ADD CONSTRAINT [FK_DiagBatchSettings_DiagBatches] FOREIGN KEY ([BatchId]) REFERENCES [dbo].[DiagBatches] ([Id]);


GO
PRINT N'Creating [dbo].[FK_DiagHistory_DiagApiSettings]...';


GO
ALTER TABLE [dbo].[DiagHistory] WITH NOCHECK
	ADD CONSTRAINT [FK_DiagHistory_DiagApiSettings] FOREIGN KEY ([DiagApiSettingsId]) REFERENCES [dbo].[DiagApiSettings] ([Id]);


GO
PRINT N'Creating [dbo].[FK_DiagHistory_DiagHistoryMeta]...';


GO
ALTER TABLE [dbo].[DiagHistory] WITH NOCHECK
	ADD CONSTRAINT [FK_DiagHistory_DiagHistoryMeta] FOREIGN KEY ([id]) REFERENCES [dbo].[DiagHistoryMeta] ([Id]);


GO
PRINT N'Creating [dbo].[FK_DiagHistoryMeta_DiagBatches]...';


GO
ALTER TABLE [dbo].[DiagHistoryMeta] WITH NOCHECK
	ADD CONSTRAINT [FK_DiagHistoryMeta_DiagBatches] FOREIGN KEY ([DiagBatchId]) REFERENCES [dbo].[DiagBatches] ([Id]);


GO
PRINT N'Creating [dbo].[FK_EventWorkflows_EventLevels]...';


GO
ALTER TABLE [dbo].[EventWorkflows] WITH NOCHECK
	ADD CONSTRAINT [FK_EventWorkflows_EventLevels] FOREIGN KEY ([LevelID]) REFERENCES [dbo].[EventLevels] ([LevelID]);


GO
PRINT N'Creating [dbo].[FK_EventWorkflows_EventWorkflows]...';


GO
ALTER TABLE [dbo].[EventWorkflows] WITH NOCHECK
	ADD CONSTRAINT [FK_EventWorkflows_EventWorkflows] FOREIGN KEY ([EventCode]) REFERENCES [dbo].[EventCodes] ([EventCode]);


GO
PRINT N'Creating [dbo].[FK_NotificationHistory_Business_Area_Application]...';


GO
ALTER TABLE [dbo].[NotificationHistory] WITH NOCHECK
	ADD CONSTRAINT [FK_NotificationHistory_Business_Area_Application] FOREIGN KEY ([AppID]) REFERENCES [dbo].[Business_Area_Application] ([Id]);


GO
PRINT N'Creating [dbo].[FK_NotificationLevelsByApplication_Business_Area_Application]...';


GO
ALTER TABLE [dbo].[NotificationLevelsByApplication] WITH NOCHECK
	ADD CONSTRAINT [FK_NotificationLevelsByApplication_Business_Area_Application] FOREIGN KEY ([ApplicationID]) REFERENCES [dbo].[Business_Area_Application] ([Id]);


GO
PRINT N'Creating [dbo].[FK_NotificationLevelsByApplication_EventLevels]...';


GO
ALTER TABLE [dbo].[NotificationLevelsByApplication] WITH NOCHECK
	ADD CONSTRAINT [FK_NotificationLevelsByApplication_EventLevels] FOREIGN KEY ([LevelID]) REFERENCES [dbo].[EventLevels] ([LevelID]);


GO
PRINT N'Creating [dbo].[fn_ComposeEventMessage]...';


GO
CREATE FUNCTION [dbo].[fn_ComposeEventMessage](
	@TableName EventKeyValuePair  READONLY,
	@Template varchar(MAX)
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	
	DECLARE @MyKey varchar(50), @MyValue varchar(MAX), @Result varchar(MAX)  
	set @Result = @Template 

	DECLARE myCursor CURSOR LOCAL FAST_FORWARD FOR
		SELECT [KEY], [Value]
		FROM @TableName

	OPEN myCursor
		FETCH NEXT FROM myCursor INTO @MyKey, @MyValue
		WHILE @@FETCH_STATUS = 0 BEGIN
			set @Result = replace(@Result,@MyKey,@MyValue)
			FETCH NEXT FROM myCursor INTO @MyKey, @MyValue
		END
	CLOSE myCursor
	DEALLOCATE myCursor     
	 
	RETURN @Result
END
GO
PRINT N'Creating [dbo].[fn_GetAllTransactionLogs]...';


GO

--select * from [dbo].[fn_GetAllTransactionLogs]()

CREATE Function [dbo].[fn_GetAllTransactionLogs]
(
)
returns @results table
(
	[LogTableName] [varchar](200),
	[ApplicationName] [varchar](200) ,
	[EventDate] [datetime] ,
	[EventLevel] [nvarchar](100) ,
	[UserName] [nvarchar](100) ,
	[MachineName] [nvarchar](100) ,
	[EventMessage] [nvarchar](max) ,
	[EventSource] [nvarchar](100) ,
	[EventClass] [nvarchar](100) ,
	[ErrorMethod] [nvarchar](max) ,
	[InsertErrorMessage] [nvarchar](max) ,
	[TransactionID] [varchar](50) 
)

As
begin
DECLARE @TN VARCHAR(100);
Declare @sql NVARCHAR(max);

declare @logs Table   
(
	[LogTableName] [varchar](200),
	[ApplicationID] [int] ,
	[EventDate] [datetime] ,
	[EventLevel] [nvarchar](100) ,
	[UserName] [nvarchar](100) ,
	[MachineName] [nvarchar](100) ,
	[EventMessage] [nvarchar](max) ,
	[EventSource] [nvarchar](100) ,
	[EventClass] [nvarchar](100) ,
	[ErrorMethod] [nvarchar](max) ,
	[InsertErrorMessage] [nvarchar](max) ,
	[TransactionID] [varchar](50) 
)

insert into @logs
SELECT    'ADP_Maintenance_Logs' as tablename,    ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID
FROM            ADP_Maintenance_Logs
union all
SELECT     'ADP_Scheduler_Logs' as tablename,     ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[ADP_Scheduler_Logs]
union all
SELECT    'Finance_Clients_Logs' as tablename ,   ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Finance_Clients_Logs]
union all
SELECT    'ADP_Scheduler_Logs' as tablename  ,  ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Finance_Employee_Logs]
union all
SELECT     'Finance_SecondaryAssignment_Logs' as tablename ,  ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Finance_SecondaryAssignment_Logs]
union all
SELECT     'Finance_SupplierAssociate_Log' as tablename ,  ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Finance_SupplierAssociate_Logs]
union all
SELECT    'Finance_Transaction_Log' as tablename ,   ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Finance_Transaction_Logs]
union all
SELECT    'HR_Employee_Logs' as tablename ,   ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[HR_Employee_Logs]
union all
SELECT   'HR_Monitor_Logs' as tablename ,      ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[HR_Monitor_Logs]
union all
SELECT   'HR_Transaction_Logs' as tablename ,      ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[HR_Transaction_Logs]
union all
SELECT   'QTRZ_Scheduler_Logs' as tablename ,      ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[QTRZ_Scheduler_Logs]
union all
SELECT   'Security_Authentication_Logs' as tablename ,      ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Security_Authentication_Logs]
union all
SELECT    'Staffing_Candidate_Logs' as tablename ,     ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Staffing_Candidate_Logs]
union all
SELECT    'Staffing_Clients_Logs' as tablename ,     ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Staffing_Clients_Logs]
union all
SELECT   'Staffing_Employee_Logs' as tablename ,      ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Staffing_Employee_Logs]
union all
SELECT    'Staffing_SecondaryAssignment_Logs' as tablename ,     ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Staffing_SecondaryAssignment_Logs]
union all
SELECT    'Staffing_SupplierAssociate_Logs' as tablename ,     ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Staffing_SupplierAssociate_Logs]
union all
SELECT    'Staffing_Transaction_Logs' as tablename ,     ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[Staffing_Transaction_Logs]
union all
SELECT   'UKFinance_Logs' as tablename ,      ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[UKFinance_Logs]
union all
SELECT    'UKStaffing_Logs' as tablename ,     ApplicationID, EventDate, EventLevel, UserName, MachineName, EventMessage, EventSource, EventClass, ErrorMethod, InsertErrorMessage, TransactionID from [dbo].[UKStaffing_Logs]
	
	Insert into @results
	select 
	l.LogTableName,
	baa.ApplicationName, 
			l.EventDate,
		l.EventLevel,
		l.UserName  ,
		l.MachineName,
		l.EventMessage  ,
		l.EventSource,
		l.EventClass,
		l.ErrorMethod,
		l.InsertErrorMessage  ,
		l.TransactionID 
	from @logs l 
	Inner Join [dbo].[Business_Area_Application] baa On l.ApplicationID = baa.[Id]
	order by EventDate desc

	return
End
GO
PRINT N'Refreshing [dbo].[fn_TransactionSummaries]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_TransactionSummaries]';


GO
PRINT N'Creating [dbo].[vw_tmp_ErrorMessages]...';


GO

Create View vw_tmp_ErrorMessages
As

Select Distinct [EventLevel], EventMessage from [dbo].[Finance_Clients_Logs] Union All
Select Distinct [EventLevel], EventMessage from [dbo].[Finance_Transaction_Logs] Union All
Select Distinct [EventLevel], EventMessage from [dbo].[Security_Authentication_Logs] Union All
Select Distinct [EventLevel], EventMessage from [dbo].[Staffing_Clients_Logs] Union All
Select Distinct [EventLevel], EventMessage from [dbo].[Staffing_Employee_Logs] Union All
Select Distinct [EventLevel], EventMessage from [dbo].[Staffing_Transaction_Logs] Union All
Select Distinct [EventLevel], EventMessage from [dbo].[UKFinance_Logs] Union All
Select Distinct [EventLevel], EventMessage from [dbo].[UKStaffing_Logs]
GO
PRINT N'Refreshing [dbo].[vw_TransactionSummaries]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vw_TransactionSummaries]';


GO
PRINT N'Creating [dbo].[sp_GetAllEventsByAppID]...';


GO
-- =============================================
-- Author:		SUMAN KUMAR NATH
-- Create date: 1/20/2015
-- Description:	Inserts a log
-- =============================================
CREATE PROCEDURE [dbo].[sp_GetAllEventsByAppID]
	-- Add the parameters for the stored procedure here
	@AppID int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	 
	DECLARE @EventCode int, @LevelID  int, @ActionType varchar(3), @Template varchar(MAX), @CAppID int

	IF NOT EXISTS(SELECT Id from Business_Area_Application a where a.Id = @AppID and a.EnableLog = 1)	
	BEGIN
	 -- OK Logging is diabled , just get out of here
	 PRINT 'Log is disabled for APP : ' + CAST(@AppID as varchar)
	 RETURN	
	END

IF EXISTS(SELECT LevelID FROM EventLevelsByApplication a WHERE a.ApplicationID = @AppID)
BEGIN
	
	SELECT t.EventCode,ev.EventKey, el.LevelName, t.ActionType, t.Template, t.AppID as PriorityAppID
		FROM EventWorkflows t
		LEFT JOIN EventCodes ev on ev.EventCode = t.EventCode 
		LEFT JOIN EventLevels el on el.LevelID = t.LevelID
		LEFT JOIN EventLevelsByApplication apple on apple.LevelId = t.LevelID 
		where t.IsActive=1 and ev.IsActive=1 and el.IsActive=1 
		and apple.ApplicationID = @AppID

END
ELSE
BEGIN
 PRINT 'ELSE'
	
	SELECT t.EventCode, ev.EventKey,el.LevelName, t.ActionType, t.Template, t.AppID as PriorityAppID
		FROM EventWorkflows t
		LEFT JOIN EventCodes ev on ev.EventCode = t.EventCode 
		LEFT JOIN EventLevels el on el.LevelID = t.LevelID
		where t.IsActive=1 and ev.IsActive=1 and el.IsActive=1 

END
END
GO
PRINT N'Creating [dbo].[sp_GetAllNotificationEventsByAppID]...';


GO
-- =============================================
-- Author:		SUMAN KUMAR NATH
-- Create date: 1/20/2015
-- Description:	Inserts a log
-- =============================================
CREATE PROCEDURE [dbo].[sp_GetAllNotificationEventsByAppID]
	-- Add the parameters for the stored procedure here
	@AppID int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	 
	DECLARE @EventCode int, @LevelID  int, @ActionType varchar(3), @Template varchar(MAX), @CAppID int

	IF NOT EXISTS(SELECT Id from Business_Area_Application a where a.Id = @AppID and a.EnableNotification = 1)	
	BEGIN
	 -- OK Notification is diabled , just get out of here
	 PRINT 'Notification is disabled for APP : ' + CAST(@AppID as varchar)
	 RETURN	
	END

IF EXISTS(SELECT LevelID FROM NotificationLevelsByApplication a WHERE a.ApplicationID = @AppID)
BEGIN
	
	SELECT t.EventCode,ev.EventKey, el.LevelName, t.SubjectTemplate, t.BodyTemplate, t.AppID as PriorityAppID
		FROM NotificationWorkflows t
		LEFT JOIN EventCodes ev on ev.EventCode = t.EventCode 
		LEFT JOIN EventLevels el on el.LevelID = t.LevelID
		LEFT JOIN NotificationLevelsByApplication apple on apple.LevelId = t.LevelID 
		where t.IsActive=1 and ev.IsActive=1 and el.IsActive=1 
		and apple.ApplicationID = @AppID

END
ELSE
BEGIN
 PRINT 'ELSE'
	
	SELECT t.EventCode,ev.EventKey, el.LevelName, t.SubjectTemplate, t.BodyTemplate, t.AppID as PriorityAppID
		FROM NotificationWorkflows t
		LEFT JOIN EventCodes ev on ev.EventCode = t.EventCode 
		LEFT JOIN EventLevels el on el.LevelID = t.LevelID
		where t.IsActive=1 and ev.IsActive=1 and el.IsActive=1 

END
END
GO
PRINT N'Creating [dbo].[sp_LogLevelIDUpdateOnOldTable]...';


GO
-- =============================================
-- Author:		SUMAN KUMAR NATH
-- Create date: 1/20/2015
-- Description:	MIGRATE DATA FROM OLD LOG SCEMA TO NEW SCHEMA
-- =============================================
CREATE PROCEDURE sp_LogLevelIDUpdateOnOldTable
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	update Finance_Clients_Logs set LevelID = 
	CASE EventLevel
		WHEN 'Fatal'THEN 1 
		WHEN 'Error'THEN 2 
		WHEN 'Fail'THEN 3 
		WHEN 'Warn'THEN 4 
		WHEN 'Info'THEN 5
		WHEN 'Debug'THEN 6 
		WHEN 'Success'THEN 7 
		else NULL 
	END

END
GO
PRINT N'Refreshing [dbo].[fn_GetAllTransaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_GetAllTransaction]';


GO
PRINT N'Refreshing [dbo].[sp_TriageTransaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_TriageTransaction]';


GO
PRINT N'Refreshing [dbo].[usp_GetAllTransactionLogs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetAllTransactionLogs]';


GO
PRINT N'Refreshing [dbo].[usp_GetAllTransactionRelatedLogs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetAllTransactionRelatedLogs]';


GO
PRINT N'Refreshing [dbo].[usp_GetTransactionByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetTransactionByID]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE DIS4_dev;


GO
ALTER TABLE [dbo].[Business_Area_Application_Config] WITH CHECK CHECK CONSTRAINT [FK_Business_Area_Application_Config_Business_Area_Application];

ALTER TABLE [dbo].[DiagApiSettings] WITH CHECK CHECK CONSTRAINT [FK_DiagApiSettings_Business_Area_Application];

ALTER TABLE [dbo].[DiagApiSettings] WITH CHECK CHECK CONSTRAINT [FK_DiagApiSettings_DiagTestSettings];

ALTER TABLE [dbo].[DiagBatchSettings] WITH CHECK CHECK CONSTRAINT [FK_DiagBatchSettings_DiagApiSettings];

ALTER TABLE [dbo].[DiagBatchSettings] WITH CHECK CHECK CONSTRAINT [FK_DiagBatchSettings_DiagBatches];

ALTER TABLE [dbo].[DiagHistory] WITH CHECK CHECK CONSTRAINT [FK_DiagHistory_DiagApiSettings];

ALTER TABLE [dbo].[DiagHistory] WITH CHECK CHECK CONSTRAINT [FK_DiagHistory_DiagHistoryMeta];

ALTER TABLE [dbo].[DiagHistoryMeta] WITH CHECK CHECK CONSTRAINT [FK_DiagHistoryMeta_DiagBatches];

ALTER TABLE [dbo].[EventWorkflows] WITH CHECK CHECK CONSTRAINT [FK_EventWorkflows_EventLevels];

ALTER TABLE [dbo].[EventWorkflows] WITH CHECK CHECK CONSTRAINT [FK_EventWorkflows_EventWorkflows];

ALTER TABLE [dbo].[NotificationHistory] WITH CHECK CHECK CONSTRAINT [FK_NotificationHistory_Business_Area_Application];

ALTER TABLE [dbo].[NotificationLevelsByApplication] WITH CHECK CHECK CONSTRAINT [FK_NotificationLevelsByApplication_Business_Area_Application];

ALTER TABLE [dbo].[NotificationLevelsByApplication] WITH CHECK CHECK CONSTRAINT [FK_NotificationLevelsByApplication_EventLevels];


GO
PRINT N'Update complete.';


GO
